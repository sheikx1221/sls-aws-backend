# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: hassannasir
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: sls-handicraft-backend
# "service" is the name of this project. This will also be added to your AWS resource names.
service: sls-aws-backend

stages:
  prod:
    params:
      handicraftTableName: "handicrafts-prod"
      cartTableName: "carts-prod"
  dev:
    params:
      handicraftTableName: "handicrafts-dev"
      cartTableName: "carts-dev"

provider:
  name: aws
  runtime: nodejs20.x
  # Uncomment to easily set up a custom domain. Read the docs for more details:
  # https://www.serverless.com/framework/docs/providers/aws/guide/domains
  # domain: api.example.com
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [HandiCraftsTable, Arn]
            - Fn::GetAtt: [CartTable, Arn]
  environment:
    HANDICRAFTS_TABLE: ${param:handicraftTableName}
    CART_TABLE: ${param:cartTableName}

functions:
  createHandicraft:
    handler: handlers/handicrafts/create.handler
    events:
      - httpApi:
          method: POST
          path: /handicrafts

  createCartItem:
    handler: handlers/cart/create.handler
    events:
      - httpApi:
          method: POST
          path: /carts

  getHandicraft:
    handler: handlers/handicrafts/read.handler
    events:
      - httpApi:
          method: GET
          path: /handicrafts

  listHandicraft:
    handler: handlers/handicrafts/list.handler
    events:
      - httpApi:
          method: GET
          path: /handicrafts/list

  listCartItems:
    handler: handlers/cart/list.handler
    events:
      - httpApi:
          method: GET
          path: /carts

  deleteHandicraft:
    handler: handlers/handicrafts/delete.handler
    events:
      - httpApi:
          method: DELETE
          path: /handicrafts

resources:
  Resources:
    HandiCraftsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: craftId
            AttributeType: S
        KeySchema:
          - AttributeName: craftId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:handicraftTableName}

    CartTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: itemId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: itemId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:cartTableName}
